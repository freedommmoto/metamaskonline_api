// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: wallet.sql

package model

import (
	"context"
)

const selectFollowWalletByIDUser = `-- name: SelectFollowWalletByIDUser :one
select wallet_id, metamask_wallet_id, follow_wallet, id_user, id_chain, last_block_number, created_at, modified, deleted, wallet_name
from wallet
where id_user = $1
and follow_wallet = true
and deleted is null
`

func (q *Queries) SelectFollowWalletByIDUser(ctx context.Context, idUser int32) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, selectFollowWalletByIDUser, idUser)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.MetamaskWalletID,
		&i.FollowWallet,
		&i.IDUser,
		&i.IDChain,
		&i.LastBlockNumber,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
		&i.WalletName,
	)
	return i, err
}

const selectWalletByID = `-- name: SelectWalletByID :one
select wallet_id, metamask_wallet_id, follow_wallet, id_user, id_chain, last_block_number, created_at, modified, deleted, wallet_name
from wallet
where wallet_id = $1
and deleted is null
`

func (q *Queries) SelectWalletByID(ctx context.Context, walletID int32) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, selectWalletByID, walletID)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.MetamaskWalletID,
		&i.FollowWallet,
		&i.IDUser,
		&i.IDChain,
		&i.LastBlockNumber,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
		&i.WalletName,
	)
	return i, err
}

const selectWalletByIDUser = `-- name: SelectWalletByIDUser :many
select wallet_id, metamask_wallet_id, follow_wallet, id_user, id_chain, last_block_number, created_at, modified, deleted, wallet_name
from wallet
where id_user = $1
and deleted is null
`

func (q *Queries) SelectWalletByIDUser(ctx context.Context, idUser int32) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, selectWalletByIDUser, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.WalletID,
			&i.MetamaskWalletID,
			&i.FollowWallet,
			&i.IDUser,
			&i.IDChain,
			&i.LastBlockNumber,
			&i.CreatedAt,
			&i.Modified,
			&i.Deleted,
			&i.WalletName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectWalletByMetamaskWalletID = `-- name: SelectWalletByMetamaskWalletID :one
select wallet_id, metamask_wallet_id, follow_wallet, id_user, id_chain, last_block_number, created_at, modified, deleted, wallet_name
from wallet
where metamask_wallet_id = $1
and deleted is null
`

func (q *Queries) SelectWalletByMetamaskWalletID(ctx context.Context, metamaskWalletID string) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, selectWalletByMetamaskWalletID, metamaskWalletID)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.MetamaskWalletID,
		&i.FollowWallet,
		&i.IDUser,
		&i.IDChain,
		&i.LastBlockNumber,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
		&i.WalletName,
	)
	return i, err
}

const updateLastBlockNumber = `-- name: UpdateLastBlockNumber :one
update wallet
set last_block_number = $1
where wallet_id = $2
and deleted is null
RETURNING wallet_id, metamask_wallet_id, follow_wallet, id_user, id_chain, last_block_number, created_at, modified, deleted, wallet_name
`

type UpdateLastBlockNumberParams struct {
	LastBlockNumber int32 `json:"last_block_number"`
	WalletID        int32 `json:"wallet_id"`
}

func (q *Queries) UpdateLastBlockNumber(ctx context.Context, arg UpdateLastBlockNumberParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, updateLastBlockNumber, arg.LastBlockNumber, arg.WalletID)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.MetamaskWalletID,
		&i.FollowWallet,
		&i.IDUser,
		&i.IDChain,
		&i.LastBlockNumber,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
		&i.WalletName,
	)
	return i, err
}
