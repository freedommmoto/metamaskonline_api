// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: chainevent.sql

package model

import (
	"context"
	"database/sql"
)

const insertChainEvent = `-- name: InsertChainEvent :one
INSERT INTO chain_event ( wallet_id, action_type, from_metamask_wallet_id, to_metamask_wallet_id, log_event)
VALUES ( $1, $2, $3, $4, $5) RETURNING id_chain_event, wallet_id, action_type, from_metamask_wallet_id, to_metamask_wallet_id, log_event, created_at
`

type InsertChainEventParams struct {
	WalletID             int32          `json:"wallet_id"`
	ActionType           sql.NullString `json:"action_type"`
	FromMetamaskWalletID sql.NullString `json:"from_metamask_wallet_id"`
	ToMetamaskWalletID   sql.NullString `json:"to_metamask_wallet_id"`
	LogEvent             sql.NullString `json:"log_event"`
}

func (q *Queries) InsertChainEvent(ctx context.Context, arg InsertChainEventParams) (ChainEvent, error) {
	row := q.db.QueryRowContext(ctx, insertChainEvent,
		arg.WalletID,
		arg.ActionType,
		arg.FromMetamaskWalletID,
		arg.ToMetamaskWalletID,
		arg.LogEvent,
	)
	var i ChainEvent
	err := row.Scan(
		&i.IDChainEvent,
		&i.WalletID,
		&i.ActionType,
		&i.FromMetamaskWalletID,
		&i.ToMetamaskWalletID,
		&i.LogEvent,
		&i.CreatedAt,
	)
	return i, err
}
